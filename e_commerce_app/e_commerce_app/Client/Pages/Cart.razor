@page "/cart"
@using e_commerce_app.Client.Services.AuthService
@inject IAuthService AuthService
@inject ICartService CartService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart </h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.Product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.Product.Id">@product.Product.Title</a></h5>
                    <h3><span class="badge bg-primary">@product.Product.ProductVariants[0].ProductType.Name Variant</span></h3>
                   
                    <input type="number" value="@product.Quantity"
                   @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product.Product.Id,product.ProductTypeId))"
                   class="form-control input-quantity"
                   min="1" />
                    <button class="btn btn-delete" @onclick="@(() =>
                        RemoveProductFromCart( product.Product.Id , product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Product.ProductVariants[0].Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total : @GetTotalCost()
        </div>
    </div>
    @* @if (isAuthenticated) *@
    @* { *@
    @*     <div> *@
    @*         <h5>Delivery Address</h5> *@
    @*         <AddressForm /> *@
    @*     </div> *@
    @* } *@
    <button class="btn alert-success float-end mt-1" @onclick="PlaceOrder">Place Order</button>
}
<div class="text-danger bg-info m-3 p-3 border-3">
    <span>@message</span>
</div>


@code {
    List<CartItem> cartProducts = null;
    string message = "Loading cart...";


    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

   
    private async Task LoadCart()
    {

        cartProducts = CartService.ProductsInCart;
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }
    
    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged; 
    }
     
    private async Task UpdateQuantity(ChangeEventArgs e, int productId , int productTypeId)
    {
        var index = cartProducts.FindIndex(p => p.Product.Id == productId && p.ProductTypeId == productTypeId);
        cartProducts[index].Quantity = int.Parse(e.Value.ToString());
    }
    
    private async Task RemoveProductFromCart(int productId , int productTypeId)
    {
        var itemToRemove = cartProducts.Single(r => r.Product.Id == productId && r.ProductTypeId == productTypeId);
        cartProducts.Remove(itemToRemove);
        await CartService.RemovedFromCart();
    }

    private decimal GetTotalCost()
    {
        decimal total = 0.0M;
        foreach (var cartItem in cartProducts)
        {
            total += (cartItem.Product.ProductVariants[0].Price * cartItem.Quantity);
        }

        return total;
    }

    private async Task PlaceOrder()
    {

        if (await AuthService.IsUserAuthenticated())
        {
            List<OrderItem> orderItems = new List<OrderItem>();
            foreach (var item in cartProducts)
            {
                var orderItem = new OrderItem()
                {
                    ProductId = item.Product.Id,
                    ProductTypeId = item.ProductTypeId,
                    Quantity = item.Quantity,
                    TotalPrice = (item.Product.ProductVariants[0].Price * item.Quantity)
                };
                orderItems.Add(orderItem);
            }

            Order order = new Order()
            {
                TotalPrice = GetTotalCost(),
                OrderItems = orderItems
            };
            var response = await CartService.PlaceOrder(order);
            message = response.Message;
            cartProducts = new List<CartItem>();
        }
        else
        {
            NavigationManager.NavigateTo($"login?returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}");
        }

    }

}